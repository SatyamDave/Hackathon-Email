import React, { useState, useRef, useEffect } from 'react';
import { Send, Sparkles, Loader, ChevronDown, ChevronUp, MessageSquare, Calendar, Star, Filter, Brain, FileText } from 'lucide-react';
import { useEmail } from '../contexts/EmailContext';

interface ChatMessage {
  role: 'user' | 'ai';
  content: string;
}

export default function AIPromptBox() {
  const [prompt, setPrompt] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [recentPrompts, setRecentPrompts] = useState<string[]>([]);
  const [chat, setChat] = useState<ChatMessage[]>([]);
  const [error, setError] = useState<string | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const { selectedEmail, emails, getFilteredEmails, addToast } = useEmail();

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [prompt]);

  // Scroll to bottom on new chat
  const chatEndRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [chat]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim() || isProcessing) return;
    
    setError(null);
    setIsProcessing(true);
    setRecentPrompts(prev => [prompt, ...prev].slice(0, 5));
    setChat(prev => [...prev, { role: 'user', content: prompt }]);

    try {
      // Mock AI response
      await new Promise(resolve => setTimeout(resolve, 1500));
      const mockResponse = `This is a demo AI response to: "${prompt}". In a real implementation, this would be generated by Azure OpenAI based on your email context and the specific question you asked.`;
      setChat(prev => [...prev, { role: 'ai', content: mockResponse }]);
      addToast('AI response generated!', 'success');
    } catch (error) {
      console.error('AI chat error:', error);
      setError('Demo mode: AI responses are simulated.');
      setChat(prev => [...prev, { role: 'ai', content: 'This is a demo response. In production, this would be a real AI-generated answer based on your emails.' }]);
    } finally {
      setIsProcessing(false);
      setPrompt('');
      if (textareaRef.current) {
        textareaRef.current.style.height = 'auto';
      }
    }
  };

  // Summarize selected email
  const handleSummarizeEmail = async () => {
    if (!selectedEmail || isProcessing) return;
    
    const summaryPrompt = "Please summarize this email";
    setIsProcessing(true);
    setChat(prev => [...prev, { role: 'user', content: summaryPrompt }]);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1200));
      const mockSummary = `Summary of "${selectedEmail.subject}": ${selectedEmail.preview}. This email appears to be ${selectedEmail.isImportant ? 'important' : 'standard'} and requires ${selectedEmail.urgency === 'high' ? 'immediate' : 'standard'} attention.`;
      setChat(prev => [...prev, { role: 'ai', content: mockSummary }]);
    } catch (error) {
      console.error('AI summary error:', error);
      setChat(prev => [...prev, { role: 'ai', content: 'Demo mode: Email summarization is simulated.' }]);
    } finally {
      setIsProcessing(false);
    }
  };

  const quickActions = [
    { icon: Star, label: "Prioritize Unread", prompt: "Prioritize my unread emails" },
    { icon: MessageSquare, label: "Summarize Important", prompt: "Summarize my important emails" },
    { icon: Calendar, label: "Find Urgent Items", prompt: "Find urgent action items" },
    { icon: Filter, label: "Organize by Project", prompt: "Organize by project" },
    { icon: Star, label: "Flag Important", prompt: "Flag all important emails from last week" },
    { icon: Calendar, label: "Schedule Review", prompt: "Schedule a review for pending emails" },
  ];

  return (
    <div className={`w-96 transition-all duration-300 ease-in-out ${isMinimized ? 'translate-y-[calc(100%-48px)]' : ''}`}>
      {/* Header - iCloud style */}
      <div 
        className="bg-white rounded-t-lg border border-gray-200 cursor-pointer shadow-sm"
        onClick={() => setIsMinimized(!isMinimized)}
      >
        <div className="p-3 flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
              <Brain className="w-4 h-4 text-white" />
            </div>
            <div>
              <h3 className="text-sm font-semibold text-gray-900">AI Assistant</h3>
              <p className="text-xs text-gray-500">Smart inbox management</p>
            </div>
          </div>
          <button 
            className="p-1 text-gray-500 hover:text-gray-700 transition-colors"
            onClick={(e) => {
              e.stopPropagation();
              setIsMinimized(!isMinimized);
            }}
          >
            {isMinimized ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
          </button>
        </div>
      </div>

      {/* Main Content - iCloud style */}
      <div className="bg-white rounded-b-lg border border-gray-200 border-t-0 shadow-sm flex flex-col h-[420px]">
        {/* Chat History */}
        <div className="flex-1 overflow-y-auto px-4 py-2 space-y-2">
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-2">
              <p className="text-red-700 text-xs">{error}</p>
            </div>
          )}
          {chat.length === 0 && !error && (
            <div className="text-gray-500 text-xs text-center mt-8">
              <div className="mb-2">
                <Brain className="w-8 h-8 mx-auto mb-2 text-blue-500" />
              </div>
              <p>AI Assistant Demo Mode</p>
              <p className="mt-1">Ask questions or use quick actions below.</p>
            </div>
          )}
          {chat.map((msg, idx) => (
            <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-[80%] px-3 py-2 rounded-lg text-sm whitespace-pre-line ${
                msg.role === 'user' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-100 text-gray-900'
              }`}>
                {msg.content}
              </div>
            </div>
          ))}
          {isProcessing && (
            <div className="flex justify-start">
              <div className="max-w-[80%] px-3 py-2 rounded-lg bg-gray-100 text-gray-900 flex items-center space-x-2">
                <Loader className="w-4 h-4 animate-spin mr-2" /> <span>AI is thinking...</span>
              </div>
            </div>
          )}
          <div ref={chatEndRef} />
        </div>

        {/* Prompt Input - iCloud style */}
        <form onSubmit={handleSubmit} className="p-3 border-t border-gray-200 bg-white">
          <div className="relative">
            <textarea
              ref={textareaRef}
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Ask AI to help manage your inbox..."
              className="w-full min-h-[60px] max-h-[120px] px-3 py-2 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 placeholder-gray-500 resize-none transition-all"
              onFocus={() => setShowSuggestions(true)}
              disabled={isProcessing}
            />
            <div className="absolute bottom-2 right-2 flex space-x-1">
              <button
                type="button"
                onClick={() => setShowSuggestions(!showSuggestions)}
                className="p-1.5 text-gray-500 hover:text-gray-700 transition-colors"
                tabIndex={-1}
              >
                <Sparkles className={`w-4 h-4 text-blue-500 transition-opacity duration-200 ${
                  showSuggestions ? 'opacity-100' : 'opacity-60'
                }`} />
              </button>
              <button
                type="submit"
                disabled={isProcessing || !prompt.trim()}
                className="p-1.5 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors disabled:opacity-50"
                tabIndex={-1}
              >
                <Send className="w-4 h-4" />
              </button>
            </div>
          </div>
        </form>

        {/* Quick Actions - iCloud style */}
        {showSuggestions && (
          <div className="p-3 border-t border-gray-200 bg-white">
            <div className="grid grid-cols-2 gap-2">
              {quickActions.map((action, idx) => (
                <button
                  key={idx}
                  onClick={() => {
                    setPrompt(action.prompt);
                    setShowSuggestions(false);
                  }}
                  className="flex items-center space-x-2 p-2 text-xs bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors text-gray-700 border border-gray-200"
                >
                  <action.icon className="w-3 h-3" />
                  <span>{action.label}</span>
                </button>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 